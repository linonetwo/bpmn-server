[bpmn-server](./api/README.md)

# API Summary  [Full Listing](./api-index.md)
## Server Components
- [engine](#engine) BPMN Execution Engine
- [definitions](#definitions) 
- [dataStore](#datastore)
- [cache](#cache) 
- [cron](#cron)

## Other Components and Topics 
- [Data Query](#data-query) 
- [configuration](#configuration)	
- [appDelegate](#appDelegate) 
- [events listener](#events) 
- [Data Variables and input/output](./data.md) 
- [Timers](./timers.md) 

## engine:

The execution Engine , processes an BPMN definition - [Engine](api/classes/engine.md)

| Method| parameters           | return  | description |
| ------------- |:-------------:| -----| ----------|
| **start** | name, input 	 | [[ExecutionContext](api3/README.md#executionContext)](api/classes/[ExecutionContext](api3/README.md#executionContext).md) | - Start a new Process execution |
| **invoke**| [itemQuery](#item-query) ,input |	[[ExecutionContext](api3/README.md#executionContext)](api/classes/[ExecutionContext](api3/README.md#executionContext).md) | Invoke an already started Item (waiting)  |
| **signal**|signalId,input| [[ExecutionContext](api3/README.md#executionContext)](api/classes/[ExecutionContext](api3/README.md#executionContext).md) | Issue a signal or message|
| **get**|[instanceQuery](#instance-query) |		[Instance](api/interfaces/iinstancedata.md) | Get an already running or idle Instance |

examples:
```javascript
    let response: [ExecutionContext](api3/README.md#executionContext);
    let data = {};

    //  engine
    response = await bpmn.engine.start('SubProcess');
    response = await bpmn.engine.invoke(itemQuery, data);
    response = await bpmn.engine.signal(signalId, data);
    response = await bpmn.engine.startEvent(instanceQuery, 'elementId', data);
    response = await bpmn.engine.get(instanceQuery);
```

## definitions
Manages BPMN defintions - [Definitions](api/classes/modelsdatastoredb.md)

| Method| parameters           | return  | description |
| ------------- |:-------------:| -----| ----------|
|		list	|- |	string[] |
|		load	| name|	definition |

## datastore
Saves and retrievs Instances Data - [DataStore](api/classes/datastore.md)
# Data Query 

The syntax follows MongoDB standards, since instance data is saved in the format of :
```javascript
{
id;
name;
//.. other instance attributes
items: { // items here
    id;
    elementId;
    status;
    // items here
}
data: { // data attributes here}

}
the query syntax must be 
- instance attributes unqualified
- item attributes are qualified by 'items.<attributeName>'
- data attributes are qualified by 'data.<attributeName>'

```
## Item Query 


| example | will retrieve          |
| -------------|-----------|
|	 { "items.id": item.id }	|	find items by id only - unique |
|		{ id: instanceId, "items.elementId": item.elementId }	| find items by instance id and elementId 	|
|	{"data.caseId": caseId  ,"items.**elementId**" : item.elementId }	| find items by caseId and item elementId 	|
|		{ id: instanceId, "items.status": 'wait' }	| check for items in "wait" |
|		{"items.status": 'wait' }	| find all items that has "wait" status |

```javascript
        and('find items by item id only', async () => {

            query = { "items.id": item.id };
            items = await server.dataStore.findItems(query);
            checkItem(items, { id: item.id });
        });
        and('find items by instance and item elemetnId ', async () => {

            query = { id: instanceId, "items.elementId": item.elementId };
            items = await server.dataStore.findItems(query);
            checkItem(items, { id: item.id });
        });

        and('find items by caseId and item elementId ', async () => {

            query = {"data.caseId": caseId  ,"items.elementId" : item.elementId };
            items = await server.dataStore.findItems(query);
            checkItem(items, { id: item.id });
        });


        and('check for items "wait" ', async () => {

            query = { id: instanceId, "items.status": 'wait' };
            items = await server.dataStore.findItems(query);
            checkItem(items, { status: 'wait' });
      });
```

## Instance Query
```javascript

        and('find instance by instance id only', async () => {

            query = { id: response.execution.id };
            instances = await server.dataStore.findInstances(query);
            checkInstance(instances, { id: response.execution.id });

        });

        and('find instance by itemd id ', async () => {

            query = {"items.id": item.id };
            instances = await server.dataStore.findInstances(query);
            checkInstance(instances, { id: response.execution.id });

        });


        and('find instance by caseId', async () => {

            query = {
                data: { caseId: caseId }};
            instances = await server.dataStore.findInstances(query);
            checkInstance(instances, { id: response.execution.id  });

        });


